{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# DEPTH FIRST VALUES binary tree\n\nmistakes:\n1. forgetting to pass in all arguments to recursive function\n2. forgetting to check for `stack.length > 0`, not just `stack > 0`\n3. wrong order of recursive calls (left before right) will fail tests\n4. make sure your return value is the right one\n5. \n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "/*\nITERATIVE\n*/\n// const depthFirstValues = (root) => {\n// if (root === null) return []\n// const result = []\n// const stack = [root]\n\n// while (stack.length > 0){\n// let node = stack.pop()\n// result.push(node.val)\n\n// if (node.left) stack.push(node.left)\n// if (node.right) stack.push(node.right)\n\n// }\n\n// return result\n// }\n\n/*\nRECURSIVE\n*/\nconst depthFirstValues = (root) => {\nif (root === null) return []\n\nlet left = depthFirstValues(root.left)\nlet right = depthFirstValues(root.right)\n\nreturn [root.val, ...left, ...right]\n\n}\n\n// const depthFirstValues = (root) => {\n//     if (root === null) return []\n//     return [root.val, ...depthFirstValues(root.left), ...depthFirstValues(root.right)]\n//     }\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst f = new Node('f');\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n\ndepthFirstValues(a); \n//    -> ['a', 'b', 'd', 'e', 'c', 'f']"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m,",
                                "  \u001b[32m'b'\u001b[39m,",
                                "  \u001b[32m'd'\u001b[39m,",
                                "  \u001b[32m'e'\u001b[39m,",
                                "  \u001b[32m'c'\u001b[39m,",
                                "  \u001b[32m'f'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst f = new Node('f');\nconst g = new Node('g');\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n//    /\n//   g\n\ndepthFirstValues(a); \n\n//    -> ['a', 'b', 'd', 'e', 'g', 'c', 'f']"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m,",
                                "  \u001b[32m'b'\u001b[39m,",
                                "  \u001b[32m'd'\u001b[39m,",
                                "  \u001b[32m'e'\u001b[39m,",
                                "  \u001b[32m'g'\u001b[39m,",
                                "  \u001b[32m'c'\u001b[39m,",
                                "  \u001b[32m'f'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\n//      a\ndepthFirstValues(a); \n//    -> ['a']"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\n\na.right = b;\nb.left = c;\nc.right = d;\nd.right = e;\n\n//      a\n//       \\\n//        b\n//       /\n//      c\n//       \\\n//        d\n//         \\\n//          e\n\ndepthFirstValues(a); \n//    -> ['a', 'b', 'c', 'd', 'e']"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m,",
                                "  \u001b[32m'b'\u001b[39m,",
                                "  \u001b[32m'c'\u001b[39m,",
                                "  \u001b[32m'd'\u001b[39m,",
                                "  \u001b[32m'e'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "\ndepthFirstValues(null); \n//    -> []"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# BREATH FIRST VALUES binary tree"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  \n  const breadthFirstValues = (root) => {\n    if (root === null) return []\n    const result = []\n\n    const queue = [root]\n\n    while (queue.length > 0){\n      let node = queue.shift()\n      result.push(node.val)\n\n      if (node.left) queue.push(node.left)\n      if (node.right) queue.push(node.right)\n\n\n    }\n\n\n    return result\n  \n  }"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst f = new Node('f');\nconst g = new Node('g');\nconst h = new Node('h');\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\nf.right = h;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n//    /       \\\n//   g         h\n\nbreadthFirstValues(a); \n//   -> ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m,",
                                "  \u001b[32m'b'\u001b[39m,",
                                "  \u001b[32m'c'\u001b[39m,",
                                "  \u001b[32m'd'\u001b[39m,",
                                "  \u001b[32m'e'\u001b[39m,",
                                "  \u001b[32m'f'\u001b[39m,",
                                "  \u001b[32m'g'\u001b[39m,",
                                "  \u001b[32m'h'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\n\n//      a\n\nbreadthFirstValues(a); \n//    -> ['a']\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst x = new Node('x');\n\na.right = b;\nb.left = c;\nc.left = x;\nc.right = d;\nd.right = e;\n\n//      a\n//       \\\n//        b\n//       /\n//      c\n//    /  \\\n//   x    d\n//         \\\n//          e\n\nbreadthFirstValues(a); \n//    -> ['a', 'b', 'c', 'x', 'd', 'e']\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'a'\u001b[39m,",
                                "  \u001b[32m'b'\u001b[39m,",
                                "  \u001b[32m'c'\u001b[39m,",
                                "  \u001b[32m'x'\u001b[39m,",
                                "  \u001b[32m'd'\u001b[39m,",
                                "  \u001b[32m'e'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "breadthFirstValues(null); \n//    -> []\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# TREE SUM binary tree"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n\n// RECURSIVE\n// const treeSum = (root) => {\n//   if (root === null) return 0\n  \n//   return root.val + treeSum(root.left) + treeSum(root.right)\n  \n  \n//   }\n\n// ITERATIVE\nconst treeSum = (root) => {\nif (root === null) return 0\nlet sum = 0\nlet queue = [root]\n\nwhile (queue.length > 0){\nlet node = queue.shift()\nsum += node.val\n\nif (node.left !== null) queue.push(node.left)\nif (node.right !== null) queue.push(node.right)\n\n}\n\nreturn sum\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(3);\nconst b = new Node(11);\nconst c = new Node(4);\nconst d = new Node(4);\nconst e = new Node(-2);\nconst f = new Node(1);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//       3\n//    /    \\\n//   11     4\n//  / \\      \\\n// 4   -2     1\n\ntreeSum(a); // -> 21"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m21\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(1);\nconst b = new Node(6);\nconst c = new Node(0);\nconst d = new Node(3);\nconst e = new Node(-6);\nconst f = new Node(2);\nconst g = new Node(2);\nconst h = new Node(2);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\nf.right = h;\n\n//      1\n//    /   \\\n//   6     0\n//  / \\     \\\n// 3   -6    2\n//    /       \\\n//   2         2\n\ntreeSum(a); // -> 10"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m10\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "treeSum(null); // -> 0"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m0\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# TREE INCLUDES binary tree\n\nbase cases:\n\n**always lead with base cases that evaluate to null**\n\n- affirmative base case, we found our value\n- negative base case, we didn't find our value so we've reached a null node \n\nLOGICAL OR\n\n- false and false => true\n- true and false => true\n- false and true => true\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  \n\n// const treeIncludes = (root, target) => {\n// if (root === null) return false\n\n// if (root.val === target ) return true\n\n// let left = treeIncludes(root.left, target)\n// let right = treeIncludes(root.right, target)\n\n// return left || right\n\n\n// }\n\n// BFS\nconst treeIncludes = (root, target) => {\nif (root === null) return false\nconst queue = [root]\n\n\nwhile (queue.length > 0){\n  let node = queue.shift()\n  if (node.val === target) return true\n\n  if(node.left) queue.push(node.left)\n  if(node.right) queue.push(node.right)\n}\n\nreturn false\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nconst a = new Node(\"a\");\nconst b = new Node(\"b\");\nconst c = new Node(\"c\");\nconst d = new Node(\"d\");\nconst e = new Node(\"e\");\nconst f = new Node(\"f\");\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n\ntreeIncludes(a, \"e\"); // -> true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(\"a\");\nconst b = new Node(\"b\");\nconst c = new Node(\"c\");\nconst d = new Node(\"d\");\nconst e = new Node(\"e\");\nconst f = new Node(\"f\");\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n\ntreeIncludes(a, \"a\"); // -> true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(\"a\");\nconst b = new Node(\"b\");\nconst c = new Node(\"c\");\nconst d = new Node(\"d\");\nconst e = new Node(\"e\");\nconst f = new Node(\"f\");\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n\ntreeIncludes(a, \"n\"); // -> false\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(\"a\");\nconst b = new Node(\"b\");\nconst c = new Node(\"c\");\nconst d = new Node(\"d\");\nconst e = new Node(\"e\");\nconst f = new Node(\"f\");\nconst g = new Node(\"g\");\nconst h = new Node(\"h\");\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\nf.right = h;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n//    /       \\\n//   g         h\n\ntreeIncludes(a, \"f\"); // -> true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(\"a\");\nconst b = new Node(\"b\");\nconst c = new Node(\"c\");\nconst d = new Node(\"d\");\nconst e = new Node(\"e\");\nconst f = new Node(\"f\");\nconst g = new Node(\"g\");\nconst h = new Node(\"h\");\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\nf.right = h;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n//    /       \\\n//   g         h\n\ntreeIncludes(a, \"p\"); // -> false\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "treeIncludes(null, \"b\"); // -> false\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# TREE MIN VALUE binary tree\n\n bfs in javascript, the shift in queue will run in O(n) time\n\nso in this case, it's O(n^2) time complexity\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n// recursive  \n  // const treeMinValue = (root) => {\n  // if (root === null ) return Infinity\n  //   let minLeft = treeMinValue(root.left)\n  //   let minRight = treeMinValue(root.right)\n  //   return Math.min(root.val, minRight, minLeft)\n  // }\n  \n  // iterative\n//   const treeMinValue = (root) => {\n//   if (root === null) return Infinity\n//     let stack = [root]\n//     let currentMin = Infinity\n\n//     while (stack.length > 0){\n//       let node = stack.pop()\n//       if (node.val < currentMin){\n//         currentMin = node.val\n//       }\n//       if (node.left) stack.push(node.left)\n//       if (node.right) stack.push(node.right)\n\n\n//     }\n// return currentMin\n//   }\n\n// BFS\nconst treeMinValue = (root) => {\nif (root === null) return Infinity\nlet currentMin = Infinity\nlet queue = [root]\n\nwhile (queue.length > 0){\nlet node = queue.shift()\nif (node.val < currentMin) currentMin = node.val\n\nif (node.right) queue.push(node.right)\nif (node.left) queue.push(node.left)\n\n\n\n}\n\n\nreturn currentMin\n}\n  "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\n  const a = new Node(3);\n  const b = new Node(11);\n  const c = new Node(4);\n  const d = new Node(4);\n  const e = new Node(-2);\n  const f = new Node(1);\n  \n  a.left = b;\n  a.right = c;\n  b.left = d;\n  b.right = e;\n  c.right = f;\n  \n  //       3\n  //    /    \\\n  //   11     4\n  //  / \\      \\\n  // 4   -2     1\n  \n  console.log(treeMinValue(a)); // -> -2"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "-2",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(5);\nconst b = new Node(11);\nconst c = new Node(3);\nconst d = new Node(4);\nconst e = new Node(14);\nconst f = new Node(12);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//       5\n//    /    \\\n//   11     3\n//  / \\      \\\n// 4   14     12\n\ntreeMinValue(a); // -> 3"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m3\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(-1);\nconst b = new Node(-6);\nconst c = new Node(-5);\nconst d = new Node(-3);\nconst e = new Node(-4);\nconst f = new Node(-13);\nconst g = new Node(-2);\nconst h = new Node(-2);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\nf.right = h;\n\n//        -1\n//      /   \\\n//    -6    -5\n//   /  \\     \\\n// -3   -4   -13\n//     /       \\\n//    -2       -2\n\ntreeMinValue(a); // -> -13\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m-13\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(42);\n\n//        42\n\ntreeMinValue(a); // -> 42\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m42\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# MAX ROOT TO LEAF PATH"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n\n  const maxPathSum = (root) => {\n    if (root === null) return -Infinity\n\n    if (!root.left && !root.right) return root.val\n\n    let left = maxPathSum(root.left)\n    let right = maxPathSum(root.right)\n\n    return root.val + Math.max(left,right )\n  \n    \n  };"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(3);\nconst b = new Node(11);\nconst c = new Node(4);\nconst d = new Node(4);\nconst e = new Node(-2);\nconst f = new Node(1);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//       3\n//    /    \\\n//   11     4\n//  / \\      \\\n// 4   -2     1\n\nmaxPathSum(a); // -> 18"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m18\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(5);\nconst b = new Node(11);\nconst c = new Node(54);\nconst d = new Node(20);\nconst e = new Node(15);\nconst f = new Node(1);\nconst g = new Node(3);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\ne.left = f;\ne.right = g;\n\n//        5\n//     /    \\\n//    11    54\n//  /   \\\n// 20   15\n//      / \\\n//     1  3\n\nmaxPathSum(a); // -> 59\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m59\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(-1);\nconst b = new Node(-6);\nconst c = new Node(-5);\nconst d = new Node(-3);\nconst e = new Node(0);\nconst f = new Node(-13);\nconst g = new Node(-1);\nconst h = new Node(-2);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\nf.right = h;\n\n//        -1\n//      /   \\\n//    -6    -5\n//   /  \\     \\\n// -3   0    -13\n//     /       \\\n//    -1       -2\n\nmaxPathSum(a); // -> -8"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m-8\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(42);\n\n//        42\n\nmaxPathSum(a); // -> 42"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m42\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# TREE VALUE COUNT\n\nmistakes: did if instead of while for the loop\n\n i can't just return 1 here because we might have to add 0 if there's no match and when the node is not null\n \n```js\n    if (root.val === target) return 1\n    ```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  \n  //  recursive\n//   const treeValueCount = (root, target) => {\n//   if (root === null) return 0\n//     const match = root.val === target ? 1 : 0\n//    return match + treeValueCount(root.left, target) + treeValueCount(root.right, target)\n  \n//   }\n\n//   alternative solution recursive\n\nconst treeValueCount = (root, target) => {\n    if (root === null) return 0\n    if (root.val === target){\n     return 1 + treeValueCount(root.left, target) + treeValueCount(root.right, target)\n    }\n      return  treeValueCount(root.left, target) + treeValueCount(root.right, target)\n    \n    }\n  \n  // // const treeValueCount = (root, target) => {\n  //   if (root === null) return 0\n  //   let count = 0\n  //   let queue = [root]\n    \n  //   while (queue.length > 0){\n  //     let node = queue.pop()\n  //     if (node.val === target) count++\n  //     if (node.right) queue.push(node.right)\n  //     if (node.left) queue.push(node.left)\n      \n  //   }\n  //   return count\n  \n  // }\n  \n  \n  // const treeValueCount = (root, target) => {\n  // if (root === null) return 0\n  //   let count = 0\n  //   let queue = [root]\n    \n  //   while (queue.length > 0){\n  //     let node = queue.shift()\n  //     if (node.val === target) count++\n  //     console.log(count)\n  //     if (node.right) queue.push(node.right)\n  //     if (node.left) queue.push(node.left)\n      \n      \n      \n  //   }\n  //   return count\n  \n  // };\n  \n  \n  const a = new Node(12);\n  const b = new Node(6);\n  const c = new Node(6);\n  const d = new Node(4);\n  const e = new Node(6);\n  const f = new Node(12);\n  \n  a.left = b;\n  a.right = c;\n  b.left = d;\n  b.right = e;\n  c.right = f;\n  \n  //      12\n  //    /   \\\n  //   6     6\n  //  / \\     \\\n  // 4   6     12\n  \ntreeValueCount(a,  6); // -> 3\n  \n  module.exports = {\n    treeValueCount,\n  };\n  "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  treeValueCount: \u001b[36m[Function: treeValueCount]\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# HOW HIGH binary tree"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n    constructor(val) {\n      this.val = val;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  \n  const howHigh = (node) => {\n  if (node === null) return -1\n  let max = Math.max(howHigh(node.left), howHigh(node.right))\n  return 1 + max\n  };\n\n  "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst f = new Node('f');\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n\nhowHigh(a); // -> 2\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m2\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst f = new Node('f');\nconst g = new Node('g');\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g\n\n//      a\n//    /   \\\n//   b     c\n//  / \\     \\\n// d   e     f\n//    /\n//   g\n\nhowHigh(a); // -> 3"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m3\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst c = new Node('c');\n\na.right = c;\n\n//      a\n//       \\\n//        c\n\nhowHigh(a); // -> 1"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m1\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\n\n//      a\n\nhowHigh(a); // -> 0\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m0\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "howHigh(null); // -> -1"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m-1\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# BOTTOM RIGHT VALUE binary tree\n\nall i had to do was reach the bottom in the correct order, by pushing the right node onto the queue before the left one"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "class Node {\n  constructor(val) {\n    this.val = val;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nconst bottomRightValue = (root) => {\n  if (root === null) return 0\n    let queue = [root]\n    let val = null\n    while (queue.length > 0){\n      let node = queue.shift()\n      val = node.val\n      if (node.left) queue.push(node.left)\n      if (node.right) queue.push(node.right)\n    }\n    return val\n    };\n    \nconst a = new Node(3);\nconst b = new Node(11);\nconst c = new Node(10);\nconst d = new Node(4);\nconst e = new Node(-2);\nconst f = new Node(1);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\n\n//       3\n//    /    \\\n//   11     10\n//  / \\      \\\n// 4   -2     1\n\nbottomRightValue(a); // -> 1\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m1\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(-1);\nconst b = new Node(-6);\nconst c = new Node(-5);\nconst d = new Node(-3);\nconst e = new Node(-4);\nconst f = new Node(-13);\nconst g = new Node(-2);\nconst h = new Node(6);\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\ne.right = h;\n\n//        -1\n//      /   \\\n//    -6    -5\n//   /  \\     \\\n// -3   -4   -13\n//     / \\       \n//    -2  6\n\nbottomRightValue(a); // -> 6\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m6\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(-1);\nconst b = new Node(-6);\nconst c = new Node(-5);\nconst d = new Node(-3);\nconst e = new Node(-4);\nconst f = new Node(-13);\nconst g = new Node(-2);\nconst h = new Node(6);\nconst i = new Node(7);\n\n\na.left = b;\na.right = c;\nb.left = d;\nb.right = e;\nc.right = f;\ne.left = g;\ne.right = h;\nf.left = i;\n\n//        -1\n//      /   \\\n//    -6    -5\n//   /  \\     \\\n// -3   -4   -13\n//     / \\    /   \n//    -2  6  7 \n\nbottomRightValue(a); // -> 7"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m7\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node('a');\nconst b = new Node('b');\nconst c = new Node('c');\nconst d = new Node('d');\nconst e = new Node('e');\nconst f = new Node('f');\n\na.left = b;\na.right = c;\nb.right = d;\nd.left = e;\ne.right = f;\n\n//      a\n//    /   \\ \n//   b     c\n//    \\\n//     d\n//    /\n//   e\n//  /\n// f\n          \nbottomRightValue(a); // -> 'f'"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'f'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const a = new Node(42);\n\n//      42\n\nbottomRightValue(a); // -> 42"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m42\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}